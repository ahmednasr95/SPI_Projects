
SPI_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000418  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000447  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000455  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cc  00000000  00000000  0000052d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ed  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  000027a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000213  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c2  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000396  00000396  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Init    00000010  0000036c  0000036c  000003e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Test_SPI 0000002a  00000318  00000318  0000038c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000000a  0000037c  0000037c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_SetPinDir 000000e2  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DIO_SetPinVal 000000e2  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.DIO_TogglePin 00000068  000002b0  000002b0  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_Master_Init 00000080  00000230  00000230  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.SPI_RecieveCharacter 00000008  00000386  00000386  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.SPI_SendCharacter 00000008  0000038e  0000038e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_12 00000014  00000358  00000358  000003cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_fini 00000002  0000039e  0000039e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  000003a0  000003a0  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  000003a2  000003a2  00000416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  00000342  00000342  000003b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  0000039a  0000039a  0000040e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
   8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
   c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  10:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  14:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  18:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  1c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  20:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  24:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  28:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  30:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_12>
  34:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  38:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  3c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  44:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  48:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  50:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  64:	0c 94 a1 01 	jmp	0x342	; 0x342 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000396 <__bad_interrupt>:
 396:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Init:

0000036c <Init>:
#include <util/delay.h>
#include "DIO_Interface.h"
#include "DIO_Private.h"

void Init(){
	SPI_Master_Init();
 36c:	0e 94 18 01 	call	0x230	; 0x230 <SPI_Master_Init>
	DIO_SetPinDir(DIO_PORTA, DIO_PIN7, DIO_PIN_OUTPUT);
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	67 e0       	ldi	r22, 0x07	; 7
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 37a:	08 95       	ret

Disassembly of section .text.Test_SPI:

00000318 <Test_SPI>:
}

void Test_SPI(){
	UINT8_t x = 0;
	SPI_SendCharacter('A');
 318:	81 e4       	ldi	r24, 0x41	; 65
 31a:	0e 94 c7 01 	call	0x38e	; 0x38e <SPI_SendCharacter>
	x = SPI_RecieveCharacter();
 31e:	0e 94 c3 01 	call	0x386	; 0x386 <SPI_RecieveCharacter>
	
	if(x == 'A'){
 322:	81 34       	cpi	r24, 0x41	; 65
 324:	69 f4       	brne	.+26     	; 0x340 <Test_SPI+0x28>
		DIO_TogglePin(DIO_PORTA, DIO_PIN7);
 326:	67 e0       	ldi	r22, 0x07	; 7
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_TogglePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	89 e6       	ldi	r24, 0x69	; 105
 332:	98 e1       	ldi	r25, 0x18	; 24
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <Test_SPI+0x1c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <Test_SPI+0x26>
 33e:	00 00       	nop
 340:	08 95       	ret

Disassembly of section .text.main:

0000037c <main>:
 */ 
#include "TEST_SPI_Interface.h"

int main(void)
{
	Init();
 37c:	0e 94 b6 01 	call	0x36c	; 0x36c <Init>
	
    while(1)
    {
        Test_SPI();//TODO:: Please write your application code 
 380:	0e 94 8c 01 	call	0x318	; 0x318 <Test_SPI>
 384:	fd cf       	rjmp	.-6      	; 0x380 <main+0x4>

Disassembly of section .text.DIO_SetPinDir:

0000006c <DIO_SetPinDir>:
			break;
		case DIO_PORTC:
			*Val = READ_BIT(PORTC_PIN, Pin);
			break;
		case DIO_PORTD:
			*Val = READ_BIT(PORTD_PIN, Pin);
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

Disassembly of section .text.DIO_SetPinVal:

0000014e <DIO_SetPinVal>:
 14e:	44 23       	and	r20, r20
 150:	b9 f1       	breq	.+110    	; 0x1c0 <DIO_SetPinVal+0x72>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <DIO_SetPinVal+0xa>
 156:	6b c0       	rjmp	.+214    	; 0x22e <DIO_SetPinVal+0xe0>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_SetPinVal+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinVal+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_SetPinVal+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_SetPinVal+0x5c>
 166:	08 95       	ret
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinVal+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinVal+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinVal+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinVal+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinVal+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinVal+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
 1a8:	08 95       	ret
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinVal+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinVal+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	08 95       	ret
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinVal+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinVal+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinVal+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinVal+0xca>
 1ce:	08 95       	ret
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinVal+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinVal+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinVal+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinVal+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinVal+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinVal+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
 216:	08 95       	ret
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinVal+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinVal+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

Disassembly of section .text.DIO_TogglePin:

000002b0 <DIO_TogglePin>:
		/*handle errors using default*/
	}
}

void DIO_TogglePin(UINT8_t Port, UINT8_t Pin){
	switch(Port){
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	89 f0       	breq	.+34     	; 0x2d6 <DIO_TogglePin+0x26>
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <DIO_TogglePin+0x10>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	c9 f0       	breq	.+50     	; 0x2ec <DIO_TogglePin+0x3c>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	11 f1       	breq	.+68     	; 0x302 <DIO_TogglePin+0x52>
 2be:	08 95       	ret
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_DATA, Pin);
 2c0:	2b b3       	in	r18, 0x1b	; 27
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_TogglePin+0x1c>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_TogglePin+0x18>
 2d0:	82 27       	eor	r24, r18
 2d2:	8b bb       	out	0x1b, r24	; 27
			break;
 2d4:	08 95       	ret
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_DATA, Pin);
 2d6:	28 b3       	in	r18, 0x18	; 24
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_TogglePin+0x32>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_TogglePin+0x2e>
 2e6:	82 27       	eor	r24, r18
 2e8:	88 bb       	out	0x18, r24	; 24
			break;
 2ea:	08 95       	ret
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_DATA, Pin);
 2ec:	25 b3       	in	r18, 0x15	; 21
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_TogglePin+0x48>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_TogglePin+0x44>
 2fc:	82 27       	eor	r24, r18
 2fe:	85 bb       	out	0x15, r24	; 21
			break;
 300:	08 95       	ret
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_DATA, Pin);
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_TogglePin+0x5e>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_TogglePin+0x5a>
 312:	82 27       	eor	r24, r18
 314:	82 bb       	out	0x12, r24	; 18
 316:	08 95       	ret

Disassembly of section .text.SPI_Master_Init:

00000230 <SPI_Master_Init>:
void SPI_SendCharacter(UINT8_t chr){
	SPDR = chr;
	while(!READ_BIT(SPSR, SPSR_SPIF));
}

void SPI_SetCallback(void (*fPtr)(void)){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <SPI_Master_Init+0x6>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	19 82       	std	Y+1, r1	; 0x01
 23c:	1a 82       	std	Y+2, r1	; 0x02
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	80 64       	ori	r24, 0x40	; 64
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	87 7f       	andi	r24, 0xF7	; 247
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	8a 83       	std	Y+2, r24	; 0x02
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	8d 7f       	andi	r24, 0xFD	; 253
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	66 e0       	ldi	r22, 0x06	; 6
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinVal>
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

Disassembly of section .text.SPI_RecieveCharacter:

00000386 <SPI_RecieveCharacter>:
/*void SPI_Slave_Init(){
	
}*/

UINT8_t SPI_RecieveCharacter(){	
	while(!READ_BIT(SPSR, SPSR_SPIF));
 386:	77 9b       	sbis	0x0e, 7	; 14
 388:	fe cf       	rjmp	.-4      	; 0x386 <SPI_RecieveCharacter>
	return SPDR;
 38a:	8f b1       	in	r24, 0x0f	; 15
}
 38c:	08 95       	ret

Disassembly of section .text.SPI_SendCharacter:

0000038e <SPI_SendCharacter>:

void SPI_SendCharacter(UINT8_t chr){
	SPDR = chr;
 38e:	8f b9       	out	0x0f, r24	; 15
	while(!READ_BIT(SPSR, SPSR_SPIF));
 390:	77 9b       	sbis	0x0e, 7	; 14
 392:	fe cf       	rjmp	.-4      	; 0x390 <SPI_SendCharacter+0x2>
}
 394:	08 95       	ret

Disassembly of section .text.__vector_12:

00000358 <__vector_12>:
void SPI_SetCallback(void (*fPtr)(void)){
	
}

void __vector_12(void) __attribute((signal));
void __vector_12(){
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
	
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000039e <_fini>:
 39e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003a0 <__funcs_on_exit>:
 3a0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003a2 <__simulator_exit>:
 3a2:	08 95       	ret

Disassembly of section .text.exit:

00000342 <exit>:
 342:	ec 01       	movw	r28, r24
 344:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__funcs_on_exit>
 348:	0e 94 cf 01 	call	0x39e	; 0x39e <_fini>
 34c:	ce 01       	movw	r24, r28
 34e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__simulator_exit>
 352:	ce 01       	movw	r24, r28
 354:	0e 94 cd 01 	call	0x39a	; 0x39a <_Exit>

Disassembly of section .text._Exit:

0000039a <_Exit>:
 39a:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
